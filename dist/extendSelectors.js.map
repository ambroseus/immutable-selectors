{"version":3,"sources":["../src/extendSelectors.js"],"names":["extendSelectorsTree","createSelectorForPath","tree","path","flat","length","root","extendSelectorsNode","sel","getSelector","bind","extendSelector","node","rootSelector","nodeAsFunc","keys","Object","forEach","key","selAsGetFunc","itemPath","param","indexOf","console","warn","getSelectorWithParam","gState","x","pathParam","slice","getIn","pathFromRoot","pathWithParameter","replace","replaceParam","newValue","updateGState","value","deleteIn","setIn"],"mappings":"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","file":"extendSelectors.js","sourcesContent":["export default function extendSelectorsTree(tree, path = []) {\r\n  // TODO noreplace option\r\n  tree.flat = {};\r\n  if (path.length > 0) {\r\n    tree.root = {};\r\n  }\r\n  extendSelectorsNode(tree, path, tree, tree);\r\n}\r\n\r\nexport function createSelectorForPath(path) {\r\n  const sel = getSelector.bind(null, path);\r\n  extendSelector(sel, path);\r\n  return sel;\r\n}\r\n\r\nfunction extendSelectorsNode(node, path = [], rootSelector, nodeAsFunc) {\r\n  const keys = Object.keys(node);\r\n  keys.forEach((key) => {\r\n    if (key !== 'flat' && key !== 'param') {\r\n      const sel = node[key];\r\n      let selAsGetFunc;\r\n      if (typeof sel === 'function') {\r\n        selAsGetFunc = sel;\r\n      } else {\r\n        let itemPath;\r\n        if (sel.param) {\r\n          if (path.indexOf('x') > 0) {\r\n            console.warn('immutable-selector. Several parameters in hierarchy are not supported yet.');\r\n          }\r\n          itemPath = [...path, key, sel.param];\r\n          selAsGetFunc = getSelectorWithParam.bind(null, itemPath);\r\n        } else if (key === 'root') {\r\n          itemPath = path;\r\n        } else {\r\n          itemPath = [...path, key];\r\n        }\r\n        if (!selAsGetFunc) {\r\n          selAsGetFunc = getSelector.bind(null, itemPath);\r\n        }\r\n\r\n        extendSelectorsNode(sel, itemPath, rootSelector, selAsGetFunc);\r\n        extendSelector(selAsGetFunc, itemPath, sel.param);\n      }\r\n      rootSelector.flat[key] = selAsGetFunc;\r\n      nodeAsFunc[key] = selAsGetFunc;\r\n    }\r\n  });\r\n}\r\n\r\nfunction getSelectorWithParam(path, gState, x) {\r\n  if (x) {\r\n    const pathParam = path.slice(0);\r\n    pathParam[path.indexOf('x')] = x;\r\n    return gState.getIn(pathParam);\r\n  } else {\r\n    return gState.getIn(path.slice(0, path.length - 1));\r\n  }\r\n}\r\n\r\nfunction getSelector(path, gState) {\r\n  return gState.getIn(path);\r\n}\r\n\r\nfunction extendSelector(sel, pathFromRoot, pathWithParameter = false) {\r\n  // sel.path = pathFromRoot;\r\n  if (pathWithParameter) {\r\n    sel.replace = replaceParam.bind(null, pathFromRoot);\r\n  } else {\n    sel.replace = replace.bind(null, pathFromRoot);\r\n  }\r\n}\r\n\r\nfunction replace(path, gState, newValue) {\r\n  return updateGState(gState, path, newValue);\r\n}\r\n\r\nfunction replaceParam(path, gState, newValue, x) {\r\n  if (x) {\r\n    const pathParam = path.slice(0);\r\n    pathParam[path.indexOf('x')] = x;\r\n    return updateGState(gState, pathParam, newValue);\r\n  } else {\r\n    return  updateGState(gState, path.slice(0, path.length - 1), newValue);\r\n  }\r\n}\r\n\r\nfunction updateGState(gState, path, value) {\r\n  if (value == null) {\r\n    return gState.deleteIn(path);\r\n  } else {\r\n    return gState.setIn(path, value);\r\n  }\r\n}\r\n"]}